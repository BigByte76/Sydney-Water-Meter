substitutions:
  device_name: sydney-water-meter
  friendly_name: House
  device_description: "Measure your water consumption with the pulse LED on your sydney water meter"
  pulse_pin: GPIO12
  status_led: GPIO5

  # imp/L rate ⬇ - Pule rate per 
  pulse_rate: '0.166666666666667'
  
  # Webserver credentials ⬇ #
  web_username: 'water'
  web_password: 'esphome'
  
esphome:
  name: '${device_name}'
  comment: '${device_description}'
  platform: ESP32
  board: nodemcu-32s

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: '${device_name}'

# Enable logging
logger:

# Enable improv over serial
improv_serial:

# Enable Home Assistant API
api:
  services:
    - service: reset_total_water
      then:
        - button.press:
            id: button_reset_total

ota:
  safe_mode: true
  reboot_timeout: 10min
  num_attempts: 5
  
web_server:
  port: 80
  auth:
    username: '${web_username}'
    password: '${web_password}'

captive_portal:

output:
  # - platform: gpio
  #   pin: GPIO5
  #   id: output_blue
  - platform: gpio
    pin: GPIO2
    id: output_red
  - platform: gpio
    pin: GPIO4
    id: output_green

light:
  - platform: binary
    internal: true
    id: led_red
    name: Red
    output: output_red

# Status LED for connection
status_led:
  pin:
    # Blue LED
    number: ${status_led}

button:
  - platform: restart
    name: "Restart - Sydney Water Meter"
  - platform: template
    name: "Reset - Total Water"
    id: button_reset_total
    on_press:
      - pulse_meter.set_total_pulses:
          id: sensor_water_pulse_meter
          value: 0
          
# Sensors for ESP version and WIFI information
text_sensor:
  - platform: version
    hide_timestamp: true
    name: '${friendly_name} - ESPHome Version'
  - platform: wifi_info
    ip_address:
      name: '${friendly_name} - IP Address'
      icon: mdi:wifi
    ssid:
      name: '${friendly_name} - Connected SSID'
      icon: mdi:wifi-strength-2

sensor:
  # WiFi signal
  - platform: wifi_signal
    name: "${friendly_name} - WiFi Signal"
    update_interval: 120s

  # Pulse meter
  - platform: pulse_meter
    name: '${friendly_name} - Water Consumption'
    id: sensor_water_pulse_meter
    unit_of_measurement: 'L'
    state_class: measurement  
    icon: mdi:flash-outlin 
    pin: ${pulse_pin}  
    on_value:
      then:
        - light.turn_on:
            id: led_red
        - delay: 0.5s
        - light.turn_off:
            id: led_red
    filters:         
      - multiply: '${pulse_rate}'
    total:
      name: '${friendly_name} - Total Water'
      id: sensor_total_energy
      unit_of_measurement: 'L'
      icon: mdi:circle-slice-3
      state_class: total_increasing
      accuracy_decimals: 3
      filters:
      - multiply: '${pulse_rate}'

# Enable time component to reset water usage at midnight
time:
  - platform: sntp
    id: my_time

#- platform: pulse_meter
#  pin: 12
#  unit_of_measurement: 'litres'
#  name: 'Sydney Water Meter v2'
#  icon: 'mdi:water'
#  accuracy_decimals: 1
#  filters:
#  - lambda: return x * (1.0 / ${pulse_rate});
#  total:
#    name: 'Water Meter v2 Total'
#    icon: 'mdi:water'
#    accuracy_decimals: 0
#    unit_of_measurement: 'litres'
#    filters:
#    - lambda: return x * (1.0 / ${pulse_rate});
